openapi: 3.0.3
info:
  title: Audit Log Microservice
  version: 1.0.0
  description: Write and query audit log entries.
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
servers:
  - url: /
    description: Via API Gateway
  - url: 'http://localhost:8014'
    description: Audit Log Microservice
tags:
  - name: Health
    description: Service status
  - name: Audit
    description: Audit log endpoints
x-tagGroups:
  - name: System
    tags:
      - Health
  - name: Audit
    tags:
      - Audit
paths:
  /health:
    get:
      servers:
        - url: 'http://localhost:8000'
          description: Via API Gateway
        - url: 'http://localhost:8014'
          description: Audit Log Service
      summary: Health check
      operationId: getHealth
      tags:
        - Health
      responses:
        '200':
          $ref: '#/components/responses/HealthSuccess'
        '400':
          $ref: '#/components/responses/HealthError'
  /v1/audit-logs:
    get:
      tags:
        - Audit
      summary: List audit logs
      description: 'Supports pagination, sorting, and simple filtering.'
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - in: query
          name: sort
          schema:
            type: string
            example: '-createdAt'
          description: Sort by field (prepend '-' for descending)
        - in: query
          name: service
          schema:
            type: string
        - in: query
          name: userId
          schema:
            type: string
        - in: query
          name: startDate
          schema:
            type: string
            format: date-time
        - in: query
          name: endDate
          schema:
            type: string
            format: date-time
      responses:
        '200':
          $ref: '#/components/responses/AuditLogList'
        '401':
          description: Unauthorized
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Audit
      summary: Create an audit log entry
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAuditLogRequest'
      responses:
        '201':
          $ref: '#/components/responses/AuditLogCreated'
        '400':
          description: Validation error
        '401':
          description: Unauthorized
        '500':
          $ref: '#/components/responses/ServerError'
  '/v1/audit-logs/{id}':
    get:
      tags:
        - Audit
      summary: Get an audit log entry by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Audit log ID
      responses:
        '200':
          description: Single audit log
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/AuditLog'
                required:
                  - success
                  - data
        '401':
          description: Unauthorized
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
components:
  schemas:
    AuditLog:
      type: object
      properties:
        id:
          type: string
          example: 66b5f1c0f7d5a1f2e1a3b456
        service:
          type: string
          example: api-gateway
        action:
          type: string
          example: user.deactivate
        actor:
          type: object
          properties:
            id:
              type: string
              example: 64fa0a8f…
            type:
              type: string
              example: user
        resource:
          type: object
          properties:
            type:
              type: string
              example: user
            id:
              type: string
              example: 64fa0a8f…
        ip:
          type: string
          example: 203.0.113.42
        userAgent:
          type: string
          example: Mozilla/5.0 (...)
        meta:
          type: object
          additionalProperties: true
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - action
        - createdAt
    CreateAuditLogRequest:
      type: object
      properties:
        service:
          type: string
          example: api-gateway
        action:
          type: string
          example: user.deactivate
        actor:
          type: object
          properties:
            id:
              type: string
              example: 64fa0a8f…
            type:
              type: string
              example: user
        resource:
          type: object
          properties:
            type:
              type: string
              example: user
            id:
              type: string
              example: 64fa0a8f…
        ip:
          type: string
          example: 203.0.113.42
        userAgent:
          type: string
        meta:
          type: object
          additionalProperties: true
      required:
        - action
  responses:
    HealthSuccess:
      description: Service is healthy
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: healthy
    HealthError:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Bad request
    AuditLogCreated:
      description: Audit log created
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                $ref: '#/components/schemas/AuditLog'
            required:
              - success
              - data
    AuditLogList:
      description: List of audit logs
      content:
        application/json:
          schema:
            type: object
            properties:
              count:
                type: integer
                example: 2
              data:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLog'
            required:
              - count
              - data
    NotFound:
      description: Audit log not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Not found
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Internal server error
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security: []
